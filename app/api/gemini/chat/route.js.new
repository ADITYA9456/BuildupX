import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    // Extract message from request body
    const { message } = await request.json();
    
    if (!message || message.trim() === '') {
      return NextResponse.json(
        { error: 'Message is required and cannot be empty' },
        { status: 400 }
      );
    }

    // First try with Gemini API, then OpenAI if available
    let aiResponse;
    let errorMessage = null;

    // Try to use Gemini API first
    if (process.env.GEMINI_API_KEY) {
      try {
        console.log('Calling Gemini API...');
        aiResponse = await callGeminiAPI(message);
        return NextResponse.json({ response: aiResponse });
      } catch (geminiError) {
        console.error('Gemini API error:', geminiError);
        errorMessage = `Gemini API error: ${geminiError.message}`;
        
        // Only try OpenAI if the API key exists
        if (process.env.OPENAI_API_KEY) {
          try {
            console.log('Trying OpenAI as fallback...');
            aiResponse = await callOpenAIAPI(message);
            return NextResponse.json({ response: aiResponse });
          } catch (openaiError) {
            console.error('OpenAI fallback error:', openaiError);
            errorMessage = `Failed to get AI response. Please try again later.`;
          }
        }
      }
    } else if (process.env.OPENAI_API_KEY) {
      // If Gemini not available but OpenAI is, use OpenAI directly
      try {
        console.log('Using OpenAI API...');
        aiResponse = await callOpenAIAPI(message);
        return NextResponse.json({ response: aiResponse });
      } catch (openaiError) {
        console.error('OpenAI API error:', openaiError);
        errorMessage = `OpenAI API error: ${openaiError.message}`;
      }
    } else {
      // No API keys configured
      return NextResponse.json(
        { error: 'No API keys configured for AI services' },
        { status: 500 }
      );
    }

    // If we got here, there was an error
    return NextResponse.json(
      { error: errorMessage || 'Failed to get AI response' },
      { status: 500 }
    );
  } catch (error) {
    console.error('Error in chat API route:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// Function to call Gemini API
async function callGeminiAPI(message) {
  const response = await fetch(
    'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-goog-api-key': process.env.GEMINI_API_KEY,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: message,
              },
            ],
          },
        ],
      }),
    }
  );

  if (!response.ok) {
    const errorText = await response.text();
    console.error('Gemini API error details:', errorText);
    throw new Error(`Failed to get response from Gemini (${response.status})`);
  }

  const data = await response.json();
  
  // Extract the generated text from the response
  return data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I couldn\'t generate a response.';
}

// Function to call OpenAI API
async function callOpenAIAPI(message) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'user',
          content: message,
        },
      ],
      max_tokens: 500,
    }),
  });

  if (!response.ok) {
    const errorData = await response.text();
    console.error('OpenAI API error details:', errorData);
    throw new Error(`Failed to get response from OpenAI (${response.status})`);
  }

  const data = await response.json();
  
  // Extract the generated text from the response
  return data.choices?.[0]?.message?.content || 'Sorry, I couldn\'t generate a response.';
}

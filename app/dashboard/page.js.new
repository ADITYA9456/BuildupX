'use client';

import { motion } from 'framer-motion';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import MealTracker from '../components/dashboard/MealTracker';
import NutritionChart from '../components/dashboard/NutritionChart';
import EnhancedNavbar from '../components/EnhancedNavbar';
import Toast from '../components/Toast';
import { useAuth } from '../context/AuthContext';

export default function Dashboard() {
  const router = useRouter();
  const { user, loading, logout } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [toast, setToast] = useState({ show: false, message: '', type: '' });
  const [nutritionPeriod, setNutritionPeriod] = useState('daily');
  const [nutritionData, setNutritionData] = useState({
    daily: { meals: [] },
    weekly: { days: [] },
    monthly: { days: [] }
  });
  
  const [profileData, setProfileData] = useState(null);
  
  useEffect(() => {
    // If auth context is done loading and no user, redirect to login
    if (!loading && !user) {
      router.push('/login');
    }
    
    // Once auth is loaded, stop the loading state
    if (!loading) {
      setIsLoading(false);
      fetchProfileData();
      fetchNutritionData();
    }
  }, [loading, user, router]);
  
  const fetchProfileData = async () => {
    try {
      const response = await fetch('/api/user/profile');
      if (!response.ok) throw new Error('Failed to fetch profile');
      const data = await response.json();
      setProfileData(data.profile);
    } catch (error) {
      console.error('Error fetching profile:', error);
      setToast({
        show: true,
        message: 'Failed to load profile data',
        type: 'error'
      });
    }
  };
  
  const fetchNutritionData = async () => {
    try {
      const response = await fetch('/api/nutrition/data');
      if (!response.ok) throw new Error('Failed to fetch nutrition data');
      const data = await response.json();
      
      // If we have no meal data, set empty structures instead of mock data
      setNutritionData({
        daily: data.data.daily || { meals: [] },
        weekly: data.data.weekly || { days: [] },
        monthly: data.data.monthly || { days: [] }
      });
    } catch (error) {
      console.error('Error fetching nutrition data:', error);
      // Set empty data structures if fetch fails
      setNutritionData({
        daily: { meals: [] },
        weekly: { days: [] },
        monthly: { days: [] }
      });
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block h-12 w-12 animate-spin rounded-full border-4 border-solid border-green-500 border-r-transparent align-[-0.125em]"></div>
          <p className="mt-4 text-xl text-white">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <EnhancedNavbar />
      <main className="bg-gradient-to-br from-gray-900 via-black to-gray-900 min-h-screen pt-24 px-4 pb-12">
        {toast.show && (
          <Toast
            message={toast.message}
            type={toast.type}
            onClose={() => setToast({ ...toast, show: false })}
          />
        )}
        
        <div className="max-w-7xl mx-auto">
          {/* Welcome section */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            <h1 className="text-3xl font-bold text-white">Welcome back, {user?.name || 'Member'}!</h1>
            <p className="text-gray-400">Track your nutrition and progress with your {user?.membership?.plan || 'STANDARD'} membership</p>
          </motion.div>
          
          {/* Dashboard grid */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Left column - Meal tracker */}
            <div className="lg:col-span-2">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 }}
              >
                <MealTracker userId={user?._id} />
              </motion.div>
            </div>
            
            {/* Right column - Profile & stats */}
            <div>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                className="bg-gray-800 rounded-xl p-6 shadow-lg mb-6"
              >
                <h2 className="text-xl font-bold text-white mb-4">Your Profile</h2>
                
                <div className="space-y-3 text-white">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Membership:</span>
                    <span className="font-semibold">{profileData?.membership || 'STANDARD'}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Height:</span>
                    <span>{profileData?.profile?.height || '--'} cm</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Weight:</span>
                    <span>{profileData?.profile?.weight || '--'} kg</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">BMI:</span>
                    <span>
                      {profileData?.profile?.height && profileData?.profile?.weight 
                        ? (profileData.profile.weight / ((profileData.profile.height / 100) ** 2)).toFixed(1) 
                        : '--'
                      }
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Goal:</span>
                    <span className="capitalize">{profileData?.profile?.goal || '--'}</span>
                  </div>
                </div>
              </motion.div>
              
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                className="bg-gray-800 rounded-xl p-6 shadow-lg"
              >
                <h2 className="text-xl font-bold text-white mb-4">Daily Target</h2>
                
                {/* This would be calculated based on user's profile and goals */}
                <div className="space-y-4">
                  <div>
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-gray-400">Calories</span>
                      <span className="text-white">1200 / 2000 kcal</span>
                    </div>
                    <div className="w-full h-2 bg-gray-700 rounded-full overflow-hidden">
                      <div className="h-full bg-blue-500 rounded-full" style={{ width: '60%' }}></div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-gray-400">Protein</span>
                      <span className="text-white">75 / 120 g</span>
                    </div>
                    <div className="w-full h-2 bg-gray-700 rounded-full overflow-hidden">
                      <div className="h-full bg-blue-500 rounded-full" style={{ width: '62.5%' }}></div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-gray-400">Carbs</span>
                      <span className="text-white">150 / 250 g</span>
                    </div>
                    <div className="w-full h-2 bg-gray-700 rounded-full overflow-hidden">
                      <div className="h-full bg-yellow-500 rounded-full" style={{ width: '60%' }}></div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="flex justify-between items-center mb-1">
                      <span className="text-gray-400">Fat</span>
                      <span className="text-white">40 / 65 g</span>
                    </div>
                    <div className="w-full h-2 bg-gray-700 rounded-full overflow-hidden">
                      <div className="h-full bg-red-500 rounded-full" style={{ width: '61.5%' }}></div>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
          </div>
          
          {/* Nutrition history */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="mt-8"
          >
            <div className="bg-gray-800 rounded-xl p-6 shadow-lg">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-white">Nutrition History</h2>
                
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => setNutritionPeriod('daily')}
                    className={`px-3 py-1 rounded-md text-sm ${
                      nutritionPeriod === 'daily'
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-700 text-gray-300'
                    }`}
                  >
                    Daily
                  </button>
                  <button
                    onClick={() => setNutritionPeriod('weekly')}
                    className={`px-3 py-1 rounded-md text-sm ${
                      nutritionPeriod === 'weekly'
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-700 text-gray-300'
                    }`}
                  >
                    Weekly
                  </button>
                  <button
                    onClick={() => setNutritionPeriod('monthly')}
                    className={`px-3 py-1 rounded-md text-sm ${
                      nutritionPeriod === 'monthly'
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-700 text-gray-300'
                    }`}
                  >
                    Monthly
                  </button>
                </div>
              </div>
              
              <div className="h-[300px] relative">
                <NutritionChart
                  dailyData={nutritionData.daily}
                  weeklyData={nutritionData.weekly}
                  monthlyData={nutritionData.monthly}
                  period={nutritionPeriod}
                />
              </div>
            </div>
          </motion.div>
        </div>
      </main>
    </>
  );
}
